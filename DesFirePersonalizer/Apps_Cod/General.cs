using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Data;

namespace DesFirePersonalizer.Apps_Cood
{
    public static class General
    {
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static string Lang = "Ar";
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static string ConnStringDB() { return Setting.ConDB; }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private static string g_UsrPermission = "";
        public static string gUsrPermission { get { return g_UsrPermission; } set { g_UsrPermission = value; } }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private static string g_LoginName = "";
        public static string gLoginName { get { return g_LoginName; } set { g_LoginName = value; } }

        private static string g_LoginFullName = "";
        public static string gLoginFullName { get { return g_LoginFullName; } set { g_LoginFullName = value; } }

        public  enum   LoginType { None, Admin, localAdmin, User }
        private static LoginType g_LoginType = LoginType.None;
        public  static LoginType gLoginType { get { return g_LoginType; } set { g_LoginType = value; } }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private static string g_ConnStrDB = "";
        public static string gConnStrDB { get { return g_ConnStrDB; } set { g_ConnStrDB = value; } }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public  enum   StageType { None, School, Center, Test }
        private static StageType g_StageID = StageType.None;
        public  static StageType gStageID { get { return g_StageID; } set { g_StageID = value; } }
        public  enum   UploadDataStatus { None, Start, Stop }
        private static UploadDataStatus g_UploadDataStatus = UploadDataStatus.None;
        public  static UploadDataStatus gUploadDataStatus { get { return g_UploadDataStatus; } set { g_UploadDataStatus = value; } }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
        private static bool isFirstLogin = true;
        public  static bool IsFirstLogin { get { return isFirstLogin; } set { isFirstLogin = value; } }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        public static string Msg(string pMsgEn, string pMsgAr) { if (Lang == "Ar") {  return pMsgAr; } else { return pMsgEn; }  }
 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static void ShowMsg(string pMsgEn, string pMsgAr) 
        {
            if (Lang == "Ar") { MessageBox.Show(pMsgAr, "رسالة", MessageBoxButtons.OK, MessageBoxIcon.Information); } 
            else { MessageBox.Show(pMsgEn, "Message", MessageBoxButtons.OK, MessageBoxIcon.Information); } 
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         public static void ShowErr(string pMsgEn, string pMsgAr)
        {
            if (Lang == "Ar") { MessageBox.Show(pMsgAr, "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            else { MessageBox.Show(pMsgEn, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static byte[] imageToByteArray(System.Drawing.Image imageIn)
        {
            if (imageIn != null)
            {
                MemoryStream ms = new MemoryStream();
                imageIn.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp);
                return ms.ToArray();
            }
            else
            {
                byte[] array1 = new byte[1];
                return array1;
            }
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static System.Drawing.Image byteArrayToImage(byte[] byteArrayIn)
        {
            MemoryStream ms = new MemoryStream(byteArrayIn);
            System.Drawing.Image returnImage = System.Drawing.Image.FromStream(ms);
            return returnImage;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static System.Drawing.Image byteArrayToImage1(byte[] byteArrayIn)
        {
            MemoryStream ms = new MemoryStream(byteArrayIn);
            System.Drawing.Image returnImage = System.Drawing.Image.FromStream(ms);
            return returnImage;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static byte[] GetBytes(string ptmpStr)
        {
            int len = ptmpStr.Length/3;
            byte[] tmpByte = new byte[len];
            for (int i = 0; i < len; i++) { tmpByte[i] = Convert.ToByte(ptmpStr.Substring(i * 3, 3)); }
            return tmpByte;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static string GetString(byte[] ptmpByte)
        {
            string tmpStr = "";
            if (ptmpByte != null)
            {
                int len = ptmpByte.Length;
                for (int i = 0; i < len; i++) { tmpStr += fd(ptmpByte[i].ToString()); }
            }
            return tmpStr;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static string fd(string pString)
        {
            if (pString.Length == 1 ) { return "00" + pString; } else if (pString.Length == 2 ) { return "0" + pString; } else { return pString; }
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static void DeleteFile(string path,string ext,string Type)
        {
            try
            {
                string Directory = Path.GetDirectoryName(path);
                if (!Directory.EndsWith("\\")) { Directory += "\\"; }
                //if (Directory == "\\") { Directory = General.ProgramPath();  }

                string dncFilePath    = Directory + Path.GetFileNameWithoutExtension(path) + ".dnc";
                string dncTypePath    = Directory + Type + ".dnc";
                string aisZipName     = Directory + Path.GetFileNameWithoutExtension(path) + ".ais";
                string encFilePath    = Directory + Path.GetFileNameWithoutExtension(path) + ".enc" + ext;
                string PrivateKeyPath = Directory + Path.GetFileNameWithoutExtension(path) + ".xml";

                if (File.Exists(dncFilePath))    { File.Delete(dncFilePath); }
                if (File.Exists(dncTypePath))    { File.Delete(dncTypePath); }
                if (File.Exists(aisZipName))     { File.Delete(aisZipName); }
                if (File.Exists(encFilePath))    { File.Delete(encFilePath); }
                if (File.Exists(PrivateKeyPath)) { File.Delete(PrivateKeyPath); }
            }
            catch(Exception ex) { }

        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static string CreateDefFolder() 
        {
            string DefPath = @"C:\AIS\";
            if (!Directory.Exists(DefPath)) { Directory.CreateDirectory(DefPath); }
            return DefPath;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
}

