using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DesFirePersonalizer.Wizered_Pages;
using SimpleWizard;
using DesFirePersonalizer.Apps_Cood;
namespace DesFirePersonalizer.Wizered_Pages
{
    public partial class IssueCard_Pag : UserControl, IWizardPage
    {
        public IssueCard_Pag()
        {
            InitializeComponent();
        }
        private DataTable CMdt;
        private DataTable ISdt;
        private DataTable dt;
        private DataTable Tempdt;
        DatabaseProvider Provider = new DatabaseProvider();

        string PermissionScreen = DatabaseProvider.UsrPermission;
        string CardMasterQuery = " SELECT * From CardMaster";
        string TempTypeQuery = " SELECT TmpName ,TmpType FROM CardTemplate WHERE TmpType = 'Student'";
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void IssueCard_Pag_Load(object sender, EventArgs e)
        {
            TxtIsStudentID.Text = DatabaseProvider.StedentID;
            TxtIsStudentName.Text = DatabaseProvider.StedentName;
            CardsGridData.DataSource = FillCardsData(" WHERE StudentID LIKE '%" + TxtIsStudentID.Text + "%'");
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region IWizardPage Members

        public UserControl Content
        {
            get { return this; }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public new void Load()
        {
            TxtNameEdit.Text = DatabaseProvider.StedentName;
            TxtIsStudentID.Text = DatabaseProvider.StedentID;
            TxtIsStudentName.Text = DatabaseProvider.StedentName;
            FillIssuestatus();

            PopulateTemplatesType();
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Save()
        {
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Cancel()
        {
            throw new NotImplementedException();
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public bool IsBusy
        {
            get { throw new NotImplementedException(); }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public bool PageValid
        {
            get { return true; }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public string ValidationMessage
        {
            get { throw new NotImplementedException(); }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region Fill Data

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private DataTable FillCardsData(string pWhere)
        {
            return CMdt = DBFun.FetchData(CardMasterQuery + " " + pWhere);
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void FillIssuestatus()
        {
            ISdt = FillIssueStatusData();
            CmbIsIssueType.ValueMember = "IsID";
            CmbIsIssueType.DisplayMember = "IsNameEn";
            CmbIsIssueType.DataSource = ISdt;
        }
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void PopulateTemplatesType()
        {
            FillIsTemplatesType();
            Tempdt = DBFun.FetchData(TempTypeQuery); // + " WHERE TmpType = 'Student' "
            DataRow DRs = (DataRow)Tempdt.Rows[0];
            string e = DRs["TmpType"].ToString();
            CmbIsTemptype.Text = DRs["TmpType"].ToString();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        private void FillIsTemplatesType()
        {
            Tempdt = FillTemplateTypeData();
            CmbIsTemptype.ValueMember = "TmpID";
            CmbIsTemptype.DisplayMember = "TmpType";
            CmbIsTemptype.DataSource = Tempdt;
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private DataTable FillIssueStatusData()
        {

            string IssueStstusQuery = "SELECT 0 as IsID,'Please select Issue Status' as IsNameEn, null as IsDescription UNION ALL SELECT IsID , IsNameEn ,IsDescription FROM  IssueState  ";

            return ISdt = DBFun.FetchData(IssueStstusQuery);
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private DataTable FillTemplateTypeData()
        {

            string TemplatesTypeQuery = "SELECT  TmpID,TmpType FROM  CardTemplate"; //WHERE TmpType =// 'Student'

            return Tempdt = DBFun.FetchData(TemplatesTypeQuery);
        }
        #endregion
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region Issue Cards 

        private void btnSave_Click(object sender, EventArgs e)
        {

            try
            {
                if (TxtIsStudentID.Text != "" && CmbIsIssueType.SelectedValue.ToString() != "0")
                {
                    DateTime StartDate = DateTime.Parse(Convert.ToDateTime(DateTimeISStart.Text).ToShortDateString());
                    DateTime EndDate = DateTime.Parse(Convert.ToDateTime(DateTimeISEnd.Text).ToShortDateString());
                    if (StartDate >= EndDate)
                    {
                        MessageBox.Show("End Date Less than DateStart ");
                        return;
                    }
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
                    CMdt = DBFun.FetchData("select * from CardMaster where EmpID = '" + CmbIsStatus.SelectedValue + TxtIsStudentID.Text.Trim() + "'  AND isPrinted = 1 ");  //AND CardStatus = 2
                    if (!DBFun.IsNullOrEmpty(CMdt) && CmbIsStatus.SelectedValue.ToString() == "1")
                    {
                        MessageBox.Show("This employee has a previous card can not be issued a new card type", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    ////if (DBFun.IsNullOrEmpty(CMdt) && CmbIsStatus.SelectedValue.ToString() != "1")
                    ////{
                    ////    MessageBox.Show("This employee does not have a card can not be issued previous card of the specified type", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    ////    return;
                    ////}

                    //CMdt = DBFun.FetchData(" WHERE StudentID = '" + TxtIsStudentID.Text + " ' ");  
                    //if (DBFun.IsNullOrEmpty(CMdt) && CmbIsStatus.SelectedValue.ToString() == "Cancel")
                    //{
                    //    MessageBox.Show("You Cant Use this option in card status", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //    return;
                    //}
                    CMdt = FillCardsData("WHERE StudentID = '" + TxtIsStudentID.Text + " ' "); //
                    if (DBFun.IsNullOrEmpty(CMdt))
                    {
                        Provider.IssueNewCards(TxtIsStudentID.Text, Int32.Parse(CmbIsIssueType.SelectedValue.ToString()),
                         DateTimeISStart.Value, DateTimeISEnd.Value, TxtIsDesc.Text, Int32.Parse(CmbIsStatus.SelectedIndex.ToString()), Int32.Parse(CmbIsTemptype.SelectedValue.ToString()));
                        MessageBox.Show("card issued Succesfully", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show("Student Already have Card please restore old card", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                {
                    MessageBox.Show("Please Fill All Fields", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
            }

            catch (Exception ex)
            {
                MessageBox.Show("You Cant Issue Card from the specified Card , Procces will Not compleate please contact administrator", "Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    }
}
